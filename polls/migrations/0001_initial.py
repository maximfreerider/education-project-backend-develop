# Generated by Django 2.1.7 on 2019-03-25 19:03

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.CharField(max_length=125)),
                ('birth_date', models.DateTimeField(null=True, verbose_name='Date of birth')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Ask_body',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Answer_list')),
            ],
        ),
        migrations.CreateModel(
            name='Ask_mode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_ask', models.ImageField(upload_to='')),
                ('ask_body_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Ask_body')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_id', models.IntegerField()),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ganre_Of_Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_ganre', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Help_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('help', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Mode_Of_Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_mos', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('image_for_presentation', models.ImageField(blank=True, upload_to='Mode_Of_Study')),
                ('text_for_read', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_package', models.CharField(max_length=100)),
                ('price', models.FloatField(verbose_name='Ціна за пакет')),
                ('lenght_discription', models.TextField()),
                ('short_discription', models.TextField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Question_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ask', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Test_body',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Answer_list')),
                ('help_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Help_list')),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question_list')),
            ],
        ),
        migrations.CreateModel(
            name='Test_mode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_of_test', models.ImageField(upload_to='')),
                ('test_body_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Test_body')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=25)),
                ('last_name', models.CharField(max_length=25)),
                ('nickname', models.CharField(max_length=25)),
                ('email', models.EmailField(max_length=254)),
                ('photo', models.ImageField(blank=True, upload_to='User')),
                ('date_of_birth', models.DateField(verbose_name='Дата народження')),
            ],
        ),
        migrations.AddField(
            model_name='package',
            name='users',
            field=models.ManyToManyField(related_name='Користувачі', to='polls.User'),
        ),
        migrations.AddField(
            model_name='ganre_of_package',
            name='ganre_id',
            field=models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='polls.Package'),
        ),
        migrations.AddField(
            model_name='ask_body',
            name='help_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Help_list'),
        ),
        migrations.AddField(
            model_name='ask_body',
            name='question_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question_list'),
        ),
    ]
